# minimal tempate
snippet samayam 
    /*>
     = [ Lakshmi_Narayana  ] =
     + [ `strftime("%d.%m.%y %H:%M:%S")` ] +
    <*/

    #include <bits/stdc++.h>
    using namespace std;

    #define int long long
    #define FAST_IO                        \
        ios_base::sync_with_stdio(false);  \
        cin.tie(NULL); cout.tie(NULL);    
	
    const int inf = 5e18 + 3;

    void solve() {
        $0
    }

    int32_t main() {
        FAST_IO;
        int tt = 1;
        cin >> tt;
        while(tt--) solve();
        return 0;
    }

# basic template
snippet basic 
    /*
    .*  author: lakshmi_narayana
    .*  created: `strftime("%d.%m.%y %H:%M:%S")`
    */

    #include <bits/stdc++.h>
    using namespace std;

    #define int int64_t
    
    int32_t main() {
        $0
    }

# competitive programming #
snippet fenwick
	const int MAXN = 1e6 + 10;
	int BIT[MAXN], a[MAXN], n;
	
	int query(int x) {
	    int sum = 0;
	    while (x > 0) {
	        x -= x & (-x);
	        sum += BIT[x];
	    }
	    return sum;
	}
	
	void update(int x, int val) {
	    while (x <= n) {
	        BIT[x] += val;
	        x += x & (-x);
	    }
	}

snippet ordered_set
	#include <ext/pb_ds/assoc_container.hpp>
	#include <ext/pb_ds/tree_policy.hpp>
	using namespace __gnu_pbds;
	
	template<typename T>
	using ordered_set = tree<T, null_type,less<T>, rb_tree_tag, tree_order_statistics_node_update>;


# cp template
#/*
#.*  author: lakshmi_narayana
#.*  created: `strftime("%d.%m.%y %H:%M:%S")`
#*/
#snippet comp 
#    #include "bits/stdc++.h"
#    using namespace std;
#    
#    #define int int64_t
#    #define FAST_IO                        \
#        ios_base::sync_with_stdio(false);  \
#        cin.tie(NULL); cout.tie(NULL);    
#    #define F first
#    #define S second
#    #define pb pushback
#    #define sz(v) ((int)(v.size()))
#    #define all(v) (v).begin(), (v).end()
#    #define rall(v) (v).rbegin(), (v).rend()
#    
#    using pii = pair<int, int>;
#    using vi = vector<int>;
#    using vpii = vector<pii>;
#
#    const int MOD = 1e9 + 7, INF = 1e18 + 7;
#
#    void __solve() {
#        $0
#        cout << '\n';
#    }
#    
#    int32_t main() {
#        FAST_IO;
#        int tt = 1; cin >> tt;
#        while(tt--) {
#            __solve();
#        }
#        return 0;
#    }

